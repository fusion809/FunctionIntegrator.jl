# Gaussian curve test
println("Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi).")
@testset "Gaussian" begin
    println("Running: chebyshev_quadrature with k=1")
    @time @test chebyshev_quadrature(x -> exp.(-x.^2), 433, 1, -100, 100) ≈ sqrt(pi)
    println("Running: chebyshev_quadrature with k=2")
    @time @test chebyshev_quadrature(x -> exp.(-x.^2), 432, 2, -100, 100) ≈ sqrt(pi)
    println("Running: chebyshev_quadrature with k=3")
    @time @test chebyshev_quadrature(x -> exp.(-x.^2), 216, 3, -100, 100) ≈ sqrt(pi)
    println("Running: chebyshev_quadrature with k=4")
    @time @test chebyshev_quadrature(x -> exp.(-x.^2), 216, 4, -100, 100) ≈ sqrt(pi)
    println("Running: hermite_quadrature with k=2")
    @time @test hermite_quadrature(x -> 1.0, 1, 2) ≈ sqrt(pi)
    println("Running: jacobi_quadrature with α=β=1")
    @time @test jacobi_quadrature(x -> exp.(-x.^2), 87019, 1, 1, -100, 100) ≈ sqrt(pi)
    # Laguerre integrates over [0, inf], so result must be
    # multiplied by 2
    println("Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain).")
    @time @test laguerre_quadrature(x -> 2*exp.(-x.^2), 46, 1) ≈ sqrt(pi)
    println("Running: legendre_quadrature")
    @time @test legendre_quadrature(x -> exp.(-x.^2), 433, -100, 100) ≈ sqrt(pi)
    println("Running: lobatto_quadrature")
    @time @test lobatto_quadrature(x -> exp.(-x.^2), 434, -100, 100) ≈ sqrt(pi)
    println("Running: radau_quadrature")
    @time @test radau_quadrature(x -> exp.(-x.^2), 349, -100, 100) ≈ sqrt(pi)
    println("Running: rectangle_rule")
    @time @test rectangle_rule(x -> exp.(-x.^2), 276, -100, 100) ≈ sqrt(pi)
    println("Running: simpsons_rule")
    @time @test simpsons_rule(x -> exp.(-x.^2), 533, -100, 100) ≈ sqrt(pi)
    println("Running: trapezoidal_rule")
    @time @test trapezoidal_rule(x -> exp.(-x.^2), 276, -100, 100) ≈ sqrt(pi)
end
